'use client';

import { useState } from 'react';
import AchievementCard, { Achievement } from './AchievementCard';
import { Button } from '@/components/ui/button';
import { trackEvent, AnalyticsEventType } from '@/utils/analytics';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const mockAchievements: Achievement[] = [
  {
    id: '1',
    title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –∑–Ω–∞–Ω–∏—è–º.',
    icon: 'üöÄ',
    progress: 1,
    maxProgress: 1,
    unlocked: true,
    category: 'learning',
    reward: {
      type: 'points',
      value: 50,
    },
    dateUnlocked: '15.05.2023',
  },
  {
    id: '2',
    title: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
    description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞. –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!',
    icon: 'üìÖ',
    progress: 5,
    maxProgress: 7,
    unlocked: false,
    category: 'engagement',
    reward: {
      type: 'badge',
      value: '–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π —É—á–µ–Ω–∏–∫',
    },
  },
  {
    id: '3',
    title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Å—Ç–æ–≤',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –ø—è—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö. –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!',
    icon: 'üèÜ',
    progress: 3,
    maxProgress: 5,
    unlocked: false,
    category: 'testing',
    reward: {
      type: 'feature',
      value: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    },
  },
  {
    id: '4',
    title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
    description: '–ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 10 —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º. –†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã!',
    icon: 'üîç',
    progress: 10,
    maxProgress: 10,
    unlocked: true,
    category: 'learning',
    reward: {
      type: 'points',
      value: 200,
    },
    dateUnlocked: '20.05.2023',
  },
  {
    id: '5',
    title: '–ù–æ—á–Ω–æ–π —Å–æ–≤–µ–Ω–æ–∫',
    description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ—Å–ª–µ 22:00 –ø—è—Ç—å —Ä–∞–∑. –£—á–µ–±–∞ –Ω–µ –∑–Ω–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏!',
    icon: 'ü¶â',
    progress: 2,
    maxProgress: 5,
    unlocked: false,
    category: 'special',
    reward: {
      type: 'badge',
      value: '–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º',
    },
  },
  {
    id: '6',
    title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö 3 —Ä–∞–∑–∞.',
    icon: 'ü¶ã',
    progress: 1,
    maxProgress: 3,
    unlocked: false,
    category: 'engagement',
    reward: {
      type: 'points',
      value: 100,
    },
  },
];

type FilterType = 'all' | 'unlocked' | 'in-progress' | 'learning' | 'testing' | 'engagement' | 'special';

export default function AchievementList() {
  const [achievements] = useState<Achievement[]>(mockAchievements);
  const [filter, setFilter] = useState<FilterType>('all');
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const filteredAchievements = achievements.filter(achievement => {
    if (filter === 'all') return true;
    if (filter === 'unlocked') return achievement.unlocked;
    if (filter === 'in-progress') return !achievement.unlocked && achievement.progress > 0;
    return achievement.category === filter;
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
  const handleShare = (achievement: Achievement) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏
    console.log(`Sharing achievement: ${achievement.title}`);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    trackEvent(AnalyticsEventType.BUTTON_CLICK, {
      button_name: 'share_achievement',
      achievement_id: achievement.id,
      achievement_title: achievement.title,
    });
  };
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h2 className="text-2xl font-bold">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        
        <div className="flex flex-wrap gap-2">
          <Button 
            variant={filter === 'all' ? 'default' : 'outline'} 
            size="sm"
            onClick={() => setFilter('all')}
          >
            –í—Å–µ
          </Button>
          <Button 
            variant={filter === 'unlocked' ? 'default' : 'outline'} 
            size="sm"
            onClick={() => setFilter('unlocked')}
          >
            –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          </Button>
          <Button 
            variant={filter === 'in-progress' ? 'default' : 'outline'} 
            size="sm"
            onClick={() => setFilter('in-progress')}
          >
            –í –ø—Ä–æ—Ü–µ—Å—Å–µ
          </Button>
        </div>
      </div>
      
      <div className="flex flex-wrap gap-2 mb-4">
        <Button 
          variant={filter === 'learning' ? 'default' : 'outline'} 
          size="sm"
          onClick={() => setFilter('learning')}
          className="bg-blue-600 hover:bg-blue-700"
        >
          –û–±—É—á–µ–Ω–∏–µ
        </Button>
        <Button 
          variant={filter === 'testing' ? 'default' : 'outline'} 
          size="sm"
          onClick={() => setFilter('testing')}
          className="bg-green-600 hover:bg-green-700"
        >
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        </Button>
        <Button 
          variant={filter === 'engagement' ? 'default' : 'outline'} 
          size="sm"
          onClick={() => setFilter('engagement')}
          className="bg-purple-600 hover:bg-purple-700"
        >
          –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        </Button>
        <Button 
          variant={filter === 'special' ? 'default' : 'outline'} 
          size="sm"
          onClick={() => setFilter('special')}
          className="bg-amber-600 hover:bg-amber-700"
        >
          –û—Å–æ–±—ã–µ
        </Button>
      </div>
      
      {filteredAchievements.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredAchievements.map((achievement) => (
            <AchievementCard
              key={achievement.id}
              achievement={achievement}
              onShare={handleShare}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <p className="text-gray-500 dark:text-gray-400">
            {filter === 'unlocked' 
              ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!' 
              : filter === 'in-progress'
                ? '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.'
                : `–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${filter}".`}
          </p>
        </div>
      )}
    </div>
  );
}
